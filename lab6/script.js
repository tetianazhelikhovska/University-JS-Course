const gameContainer = document.getElementById('game');
const movesDisplay = document.getElementById('moves');
const winMessage = document.getElementById('winMessage');
const timeDisplay = document.getElementById('time');

let grid = [];
let moveCount = 0;
let timer = 0;
let timerInterval;
let levelId = ''; // –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
let minMoves = 0; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∏–≥—Ä–∞—à—É

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä
function startTimer() {
  timerInterval = setInterval(() => {
    timer++;
    timeDisplay.textContent = `–ß–∞—Å: ${timer} —Å–µ–∫`;
  }, 1000);
}

// –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä
function stopTimer() {
  clearInterval(timerInterval);
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö
function createGrid(data) {
  grid = data.map(row => row.slice());
  renderGrid();
  moveCount = 0;
  minMoves = calculateMinMoves(data);
  updateMoves();
  winMessage.textContent = '';
  timer = 0;
  timeDisplay.textContent = `–ß–∞—Å: ${timer}`;
  startTimer();
}

// –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É
function renderGrid() {
  gameContainer.innerHTML = '';
  for (let i = 0; i < 5; i++) {
    for (let j = 0; j < 5; j++) {
      const cell = document.createElement('div');
      cell.className = 'cell' + (grid[i][j] ? ' on' : '');
      cell.dataset.row = i;
      cell.dataset.col = j;
      cell.addEventListener('click', handleClick);
      gameContainer.appendChild(cell);
    }
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É
function handleClick(e) {
  const row = parseInt(e.target.dataset.row);
  const col = parseInt(e.target.dataset.col);

  toggle(row, col);
  toggle(row - 1, col);
  toggle(row + 1, col);
  toggle(row, col - 1);
  toggle(row, col + 1);

  moveCount++;
  updateMoves();
  renderGrid();

  if (checkWin()) {
    winMessage.textContent = `üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –∑–∞ ${moveCount} –∫—Ä–æ–∫—ñ–≤!`;
    stopTimer();
  }
}

// –ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞–Ω –∫–ª—ñ—Ç–∏–Ω–∫–∏
function toggle(r, c) {
  if (r >= 0 && r < 5 && c >= 0 && c < 5) {
    grid[r][c] ^= 1;
  }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∫—Ä–æ–∫—ñ–≤
function updateMoves() {
  movesDisplay.textContent = `–ö—Ä–æ–∫—ñ–≤: ${moveCount}`;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–≥—Ä–∞—à
function checkWin() {
  return grid.flat().every(cell => cell === 0) && moveCount <= minMoves;
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∏–≥—Ä–∞—à—É
function calculateMinMoves(data) {
  let minMoves = 0;
  for (let row of data) {
    for (let cell of row) {
      if (cell === 1) minMoves++;
    }
  }
  return minMoves;
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑ JSON
async function loadLevel(levelIdParam) {
  const res = await fetch('data/levels.json');
  const levels = await res.json();
  const level = levels[levelIdParam];
  if (level) {
    levelId = levelIdParam;
    createGrid(level);
  } else {
    alert('–†—ñ–≤–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
}

// –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ—ó –≥—Ä–∏ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —Ä—ñ–≤–Ω–µ–º (–≤—ñ–¥–º—ñ–Ω–Ω–∏–º –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ)
function startNewGame() {
  const levels = ['a', 'b', 'c'];
  let randomLevel;
  do {
    randomLevel = levels[Math.floor(Math.random() * levels.length)];
  } while (randomLevel === levelId); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —Ä—ñ–≤–µ–Ω—å –Ω–µ –±—É–≤ –ø–æ—Ç–æ—á–Ω–∏–º

  loadLevel(randomLevel);
}

// –†–µ—Å—Ç–∞—Ä—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
function restartLevel() {
  loadLevel(levelId);
}
